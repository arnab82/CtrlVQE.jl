module SingleTransmon
    import DifferentialEquations

    import LinearAlgebra: norm, mul!


    """
        evolve_transmon(œà0, œâ, Œ¥, ŒΩ, Œ©, T)

    Calculate the state of a single transmon after applying a constant drive.

    # Parameters
    - œà0: initial state of transmon
    - œâ: resonance frequency (rad/ns)
    - Œ¥: anharmonicity (rad/ns)
    - ŒΩ: drive frequency (rad/ns)
    - Œ©: drive amplitude (rad/ns)
    - T: duration of drive (ns)

    """
    function evolve_transmon(
        œà0,             # INITIAL WAVE FUNCTION
        œâ,              # DEVICE RESONANCE FREQUENCY
        Œ¥,              # DEVICE ANHARMONICITY
        ŒΩ,              # PULSE FREQUENCY
        Œ©,              # PULSE AMPLITUDE
        T,              # PULSE DURATION (ns)
    )
        a = annihilator(length(œà0))
        H0 = œâ * (a'*a) - Œ¥/2 * (a'*a'*a*a)
        V = similar(H0)
        H = similar(H0)
        p = (a, H0, V, H, ŒΩ, Œ©)

        œàT = deepcopy(œà0)
        schrodinger = DifferentialEquations.ODEProblem(hamiltonian!, œàT, (0.0, T), p)
        solution = DifferentialEquations.solve(
            schrodinger,
            reltol=1e-6,
            save_everystep=false,
        )
        œàT .= solution.u[end]

        # RE-NORMALIZE THIS STATE
        œàT ./= norm(œàT)

        return œàT
    end

    function hamiltonian!(du, u, p, t)
        a, H0, V, H, ŒΩ, Œ© = p

        # BUILD UP HAMILTONIAN
        V .= Œ© .* exp(im*ŒΩ*t) .* a
        V .+= V'
        H .= H0 .+ V

        # ‚àÇœà/‚àÇt = -ùëñ H(t) œà
        H .*= -im
        mul!(du, H, u)
    end

    function annihilator(m::Integer=2)
        a = zeros(ComplexF64, (m,m))
        for i ‚àà 1:m-1
            a[i,i+1] = ‚àöi               # BOSONIC ANNIHILATION OPERATOR
        end
        return a
    end
end